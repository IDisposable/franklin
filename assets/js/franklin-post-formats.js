(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

// 'use strict';

require('./post-formats/media');
require('./post-formats/hide-boxes');
require('./post-formats/status');
require('./post-formats/gallery');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZyYW5rbGluLXBvc3QtZm9ybWF0cy5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBQSxRQUFRLHNCQUFSO0FBQ0FBLFFBQVEsMkJBQVI7QUFDQUEsUUFBUSx1QkFBUjtBQUNBQSxRQUFRLHdCQUFSIiwiZmlsZSI6ImZyYW5rbGluLXBvc3QtZm9ybWF0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vICd1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9wb3N0LWZvcm1hdHMvbWVkaWEnKTtcbnJlcXVpcmUoJy4vcG9zdC1mb3JtYXRzL2hpZGUtYm94ZXMnKTtcbnJlcXVpcmUoJy4vcG9zdC1mb3JtYXRzL3N0YXR1cycpO1xucmVxdWlyZSgnLi9wb3N0LWZvcm1hdHMvZ2FsbGVyeScpOyJdfQ==
},{"./post-formats/gallery":2,"./post-formats/hide-boxes":3,"./post-formats/media":4,"./post-formats/status":5}],2:[function(require,module,exports){
'use strict';

function gallery_box() {

  var $removeGallery = document.querySelector('.gallery_remove');
  $removeGallery.addEventListener('click', function (event) {
    event.preventDefault();

    var $this = event.target;
    var $metabox = $this.closest('.postbox');
    $metabox.querySelector('.post_format_value').value = '';
    $metabox.querySelector('.pfp-shortcode-holder').innerHTML = '';
  }, false);

  // open the media library
  var $addGallery = document.querySelector('#post_format_gallery_add');
  $addGallery.addEventListener('click', function (event) {
    event.preventDefault();
    var $this = event.target;
    var $metabox = $this.closest('.postbox');
    gallery_media($metabox);
  });
}

function gallery_media($metabox) {

  var images = $metabox.querySelector('.post_format_value').value;
  images = images.split(',');

  // if the gallery has already been initialized then just reopen it
  if (wp.media.frames.galleryBox) {
    // delete wp.media.frames.galleryBox;
    wp.media.frames.galleryBox.open();
    return;
  }

  // initialize media library in gallery mode
  wp.media.frames.galleryBox = wp.media({
    title: 'Gallery',
    library: { type: 'image' },
    multiple: true,
    toolbar: 'main-gallery',
    state: 'gallery-library',
    frame: 'post'
  });

  // precheck images already in teh gallery
  wp.media.frames.galleryBox.on('open', function () {
    var selection = wp.media.frames.galleryBox.state().get('selection');
    images.forEach(function (image) {
      var attachment = wp.media.attachment(image);
      attachment.fetch();
      selection.add(attachment ? [attachment] : []);
    });
  });

  // when the images have been checked and the selected button is pressed..
  wp.media.frames.galleryBox.on('update', function () {
    var selection = wp.media.frames.galleryBox.state().get('library');
    var str = '';
    var image_ids = [];
    selection.map(function (image) {
      image_ids.push(image.id);
    });

    str = image_ids.join(',');
    $metabox.querySelector('.post_format_value').value = str;

    benjamin_ajax_shortcode('[gallery link="none" ids="' + str + '"]', $metabox);
  });

  // open the initialized media library
  wp.media.frames.galleryBox.open();
}

function benjamin_ajax_shortcode(str, $metabox) {

  var data = {
    action: 'benjamin_postformat_shortcode',
    pfpSTR: str
  };

  jQuery.ajax({
    type: "POST",
    url: ajaxurl,
    data: data,
    complete: function complete(response) {
      if (response.status == 200) {

        var $html = response.responseText;
        if ($html == '') {
          $metabox.querySelector('.post_format_value').value = '';
        } else {
          $metabox.querySelector('.pfp-shortcode-holder').innerHTML = $html;
        }
      }
    }
  });
}

jQuery(document).ready(function ($) {
  gallery_box();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhbGxlcnkuanMiXSwibmFtZXMiOlsiZ2FsbGVyeV9ib3giLCIkcmVtb3ZlR2FsbGVyeSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiJHRoaXMiLCJ0YXJnZXQiLCIkbWV0YWJveCIsImNsb3Nlc3QiLCJ2YWx1ZSIsImlubmVySFRNTCIsIiRhZGRHYWxsZXJ5IiwiZ2FsbGVyeV9tZWRpYSIsImltYWdlcyIsInNwbGl0Iiwid3AiLCJtZWRpYSIsImZyYW1lcyIsImdhbGxlcnlCb3giLCJvcGVuIiwidGl0bGUiLCJsaWJyYXJ5IiwidHlwZSIsIm11bHRpcGxlIiwidG9vbGJhciIsInN0YXRlIiwiZnJhbWUiLCJvbiIsInNlbGVjdGlvbiIsImdldCIsImZvckVhY2giLCJpbWFnZSIsImF0dGFjaG1lbnQiLCJmZXRjaCIsImFkZCIsInN0ciIsImltYWdlX2lkcyIsIm1hcCIsInB1c2giLCJpZCIsImpvaW4iLCJiZW5qYW1pbl9hamF4X3Nob3J0Y29kZSIsImRhdGEiLCJhY3Rpb24iLCJwZnBTVFIiLCJqUXVlcnkiLCJhamF4IiwidXJsIiwiYWpheHVybCIsImNvbXBsZXRlIiwicmVzcG9uc2UiLCJzdGF0dXMiLCIkaHRtbCIsInJlc3BvbnNlVGV4dCIsInJlYWR5IiwiJCJdLCJtYXBwaW5ncyI6Ijs7QUFDQSxTQUFTQSxXQUFULEdBQXNCOztBQUVwQixNQUFJQyxpQkFBaUJDLFNBQVNDLGFBQVQsQ0FBdUIsaUJBQXZCLENBQXJCO0FBQ0FGLGlCQUFlRyxnQkFBZixDQUFnQyxPQUFoQyxFQUF5QyxVQUFTQyxLQUFULEVBQWU7QUFDcERBLFVBQU1DLGNBQU47O0FBRUEsUUFBSUMsUUFBUUYsTUFBTUcsTUFBbEI7QUFDQSxRQUFJQyxXQUFXRixNQUFNRyxPQUFOLENBQWMsVUFBZCxDQUFmO0FBQ0FELGFBQVNOLGFBQVQsQ0FBdUIsb0JBQXZCLEVBQTZDUSxLQUE3QyxHQUFxRCxF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QVUsU0FBT0MsSUFBUCxDQUFZO0FBQ1Z4QixVQUFNLE1BREk7QUFFVnlCLFNBQUtDLE9BRks7QUFHVk4sVUFBTUEsSUFISTtBQUlWTyxjQUFVLGtCQUFTQyxRQUFULEVBQWtCO0FBQzFCLFVBQUdBLFNBQVNDLE1BQVQsSUFBbUIsR0FBdEIsRUFBMEI7O0FBRXhCLFlBQUlDLFFBQVFGLFNBQVNHLFlBQXJCO0FBQ0EsWUFBR0QsU0FBUyxFQUFaLEVBQWU7QUFDYjdDLG1CQUFTTixhQUFULENBQXVCLG9CQUF2QixFQUE2Q1EsS0FBN0MsR0FBcUQsRUFBckQ7QUFDRCxTQUZELE1BRUs7QUFDSEYsbUJBQVNOLGFBQVQsQ0FBdUIsdUJBQXZCLEVBQWdEUyxTQUFoRCxHQUE0RDBDLEtBQTVEO0FBQ0Q7QUFFRjtBQUNGO0FBZlMsR0FBWjtBQWtCRDs7QUFHRFAsT0FBTzdDLFFBQVAsRUFBaUJzRCxLQUFqQixDQUF1QixVQUFTQyxDQUFULEVBQVc7QUFDaEN6RDtBQUNELENBRkQiLCJmaWxlIjoiZ2FsbGVyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuZnVuY3Rpb24gZ2FsbGVyeV9ib3goKXtcblxuICB2YXIgJHJlbW92ZUdhbGxlcnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FsbGVyeV9yZW1vdmUnKTtcbiAgJHJlbW92ZUdhbGxlcnkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCl7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICB2YXIgJHRoaXMgPSBldmVudC50YXJnZXQ7XG4gICAgICB2YXIgJG1ldGFib3ggPSAkdGhpcy5jbG9zZXN0KCcucG9zdGJveCcpO1xuICAgICAgJG1ldGFib3gucXVlcnlTZWxlY3RvcignLnBvc3RfZm9ybWF0X3ZhbHVlJykudmFsdWUgPSAnJztcbiAgICAgICRtZXRhYm94LnF1ZXJ5U2VsZWN0b3IoJy5wZnAtc2hvcnRjb2RlLWhvbGRlcicpLmlubmVySFRNTCA9ICcnO1xuICB9LCBmYWxzZSk7XG5cbiAgLy8gb3BlbiB0aGUgbWVkaWEgbGlicmFyeVxuICB2YXIgJGFkZEdhbGxlcnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcG9zdF9mb3JtYXRfZ2FsbGVyeV9hZGQnKTtcbiAgJGFkZEdhbGxlcnkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCl7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB2YXIgJHRoaXMgPSBldmVudC50YXJnZXQ7XG4gICAgdmFyICRtZXRhYm94ID0gJHRoaXMuY2xvc2VzdCgnLnBvc3Rib3gnKTtcbiAgICBnYWxsZXJ5X21lZGlhKCRtZXRhYm94KTtcbiAgfSk7XG59XG5cblxuZnVuY3Rpb24gZ2FsbGVyeV9tZWRpYSgkbWV0YWJveCkge1xuXG4gIHZhciBpbWFnZXMgPSAkbWV0YWJveC5xdWVyeVNlbGVjdG9yKCcucG9zdF9mb3JtYXRfdmFsdWUnKS52YWx1ZTtcbiAgaW1hZ2VzID0gaW1hZ2VzLnNwbGl0KCcsJyk7XG4gIFxuICAvLyBpZiB0aGUgZ2FsbGVyeSBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpemVkIHRoZW4ganVzdCByZW9wZW4gaXRcbiAgaWYod3AubWVkaWEuZnJhbWVzLmdhbGxlcnlCb3gpe1xuICAgIC8vIGRlbGV0ZSB3cC5tZWRpYS5mcmFtZXMuZ2FsbGVyeUJveDtcbiAgICB3cC5tZWRpYS5mcmFtZXMuZ2FsbGVyeUJveC5vcGVuKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gaW5pdGlhbGl6ZSBtZWRpYSBsaWJyYXJ5IGluIGdhbGxlcnkgbW9kZVxuICB3cC5tZWRpYS5mcmFtZXMuZ2FsbGVyeUJveCA9IHdwLm1lZGlhKHtcbiAgICB0aXRsZTogJ0dhbGxlcnknLFxuICAgIGxpYnJhcnk6IHsgdHlwZTogJ2ltYWdlJyB9LFxuICAgIG11bHRpcGxlOiB0cnVlLFxuICAgIHRvb2xiYXI6ICdtYWluLWdhbGxlcnknLFxuICAgIHN0YXRlOiAnZ2FsbGVyeS1saWJyYXJ5JyxcbiAgICBmcmFtZTogJ3Bvc3QnXG4gIH0pO1xuXG4gIC8vIHByZWNoZWNrIGltYWdlcyBhbHJlYWR5IGluIHRlaCBnYWxsZXJ5XG4gIHdwLm1lZGlhLmZyYW1lcy5nYWxsZXJ5Qm94Lm9uKCdvcGVuJywgZnVuY3Rpb24oKXtcbiAgICB2YXIgc2VsZWN0aW9uID0gd3AubWVkaWEuZnJhbWVzLmdhbGxlcnlCb3guc3RhdGUoKS5nZXQoJ3NlbGVjdGlvbicpO1xuICAgIGltYWdlcy5mb3JFYWNoKGZ1bmN0aW9uKGltYWdlKSB7XG4gICAgICB2YXIgYXR0YWNobWVudCA9IHdwLm1lZGlhLmF0dGFjaG1lbnQoaW1hZ2UpO1xuICAgICAgYXR0YWNobWVudC5mZXRjaCgpO1xuICAgICAgc2VsZWN0aW9uLmFkZCggYXR0YWNobWVudCA/IFsgYXR0YWNobWVudCBdIDogW10gKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gd2hlbiB0aGUgaW1hZ2VzIGhhdmUgYmVlbiBjaGVja2VkIGFuZCB0aGUgc2VsZWN0ZWQgYnV0dG9uIGlzIHByZXNzZWQuLlxuICB3cC5tZWRpYS5mcmFtZXMuZ2FsbGVyeUJveC5vbigndXBkYXRlJywgZnVuY3Rpb24oKXtcbiAgICB2YXIgc2VsZWN0aW9uID0gd3AubWVkaWEuZnJhbWVzLmdhbGxlcnlCb3guc3RhdGUoKS5nZXQoJ2xpYnJhcnknKTtcbiAgICB2YXIgc3RyID0gJyc7XG4gICAgdmFyIGltYWdlX2lkcyA9IFtdO1xuICAgIHNlbGVjdGlvbi5tYXAoIGZ1bmN0aW9uKCBpbWFnZSApIHtcbiAgICAgIGltYWdlX2lkcy5wdXNoKCBpbWFnZS5pZCApO1xuICAgIH0pO1xuXG5cbiAgICBzdHIgPSBpbWFnZV9pZHMuam9pbignLCcpO1xuICAgICRtZXRhYm94LnF1ZXJ5U2VsZWN0b3IoJy5wb3N0X2Zvcm1hdF92YWx1ZScpLnZhbHVlID0gc3RyO1xuXG4gICAgYmVuamFtaW5fYWpheF9zaG9ydGNvZGUoJ1tnYWxsZXJ5IGxpbms9XCJub25lXCIgaWRzPVwiJyArIHN0ciArICdcIl0nLCAkbWV0YWJveClcbiAgfSk7XG5cbiAgLy8gb3BlbiB0aGUgaW5pdGlhbGl6ZWQgbWVkaWEgbGlicmFyeVxuICB3cC5tZWRpYS5mcmFtZXMuZ2FsbGVyeUJveC5vcGVuKCk7XG59XG5cblxuZnVuY3Rpb24gYmVuamFtaW5fYWpheF9zaG9ydGNvZGUoc3RyLCAgJG1ldGFib3gpe1xuXG4gIHZhciBkYXRhID0ge1xuICAgIGFjdGlvbjogJ2JlbmphbWluX3Bvc3Rmb3JtYXRfc2hvcnRjb2RlJyxcbiAgICBwZnBTVFI6IHN0clxuICB9O1xuXG4gIGpRdWVyeS5hamF4KHtcbiAgICB0eXBlOiBcIlBPU1RcIixcbiAgICB1cmw6IGFqYXh1cmwsXG4gICAgZGF0YTogZGF0YSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgaWYocmVzcG9uc2Uuc3RhdHVzID09IDIwMCl7XG5cbiAgICAgICAgdmFyICRodG1sID0gcmVzcG9uc2UucmVzcG9uc2VUZXh0O1xuICAgICAgICBpZigkaHRtbCA9PSAnJyl7XG4gICAgICAgICAgJG1ldGFib3gucXVlcnlTZWxlY3RvcignLnBvc3RfZm9ybWF0X3ZhbHVlJykudmFsdWUgPSAnJztcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgJG1ldGFib3gucXVlcnlTZWxlY3RvcignLnBmcC1zaG9ydGNvZGUtaG9sZGVyJykuaW5uZXJIVE1MID0gJGh0bWw7XG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbn1cblxuXG5qUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCQpe1xuICBnYWxsZXJ5X2JveCgpO1xufSk7Il19
},{}],3:[function(require,module,exports){
"use strict";

// more or less just hides and shows the various metaboxes
jQuery(document).ready(function ($) {

  hide_format_boxes();
  clearLink();

  if ($("#post-formats-select").length <= 0) return;

  var selectedPostFormat = $("input[name='post_format']:checked").val();

  var post_formats = ['aside', 'status', 'gallery', 'image', 'link', 'quote', 'audio', 'video', 'chat'];

  // show the metabox on init
  if ($.inArray(selectedPostFormat, post_formats) != '-1') {
    $('#post_formats_' + selectedPostFormat).show();
  }

  $("input[name='post_format']:radio").change(function () {
    // hide the meta boxes
    hide_format_boxes();

    // if the selected post format is in the post formats list then show the box
    if ($.inArray($(this).val(), post_formats) != '-1') {
      $('#post_formats_' + $(this).val()).show();
    }
  });
});

function hide_format_boxes() {
  var post_formats = ['aside', 'status', 'gallery', 'image', 'link', 'quote', 'audio', 'video', 'chat'];
  post_formats = post_formats.map(function (a) {
    return '#post_formats_' + a;
  }).join(', ');

  $(post_formats).hide();
}

function clearLink() {
  $('.pfp-js-remove-link').on('click', function (e) {
    e.preventDefault();
    $(this).closest('.link-box').find('input').val('');
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhpZGUtYm94ZXMuanMiXSwibmFtZXMiOlsialF1ZXJ5IiwiZG9jdW1lbnQiLCJyZWFkeSIsIiQiLCJoaWRlX2Zvcm1hdF9ib3hlcyIsImNsZWFyTGluayIsImxlbmd0aCIsInNlbGVjdGVkUG9zdEZvcm1hdCIsInZhbCIsInBvc3RfZm9ybWF0cyIsImluQXJyYXkiLCJzaG93IiwiY2hhbmdlIiwibWFwIiwiYSIsImpvaW4iLCJoaWRlIiwib24iLCJlIiwicHJldmVudERlZmF1bHQiLCJjbG9zZXN0IiwiZmluZCJdLCJtYXBwaW5ncyI6Ijs7QUFDQTtBQUNBQSxPQUFPQyxRQUFQLEVBQWlCQyxLQUFqQixDQUF1QixVQUFTQyxDQUFULEVBQVc7O0FBRWhDQztBQUNBQzs7QUFHQSxNQUFJRixFQUFFLHNCQUFGLEVBQTBCRyxNQUExQixJQUFvQyxDQUF4QyxFQUNFOztBQUVGLE1BQUlDLHFCQUFxQkosRUFBRSxtQ0FBRixFQUF1Q0ssR0FBdkMsRUFBekI7O0FBRUEsTUFBSUMsZUFBZSxDQUFDLE9BQUQsRUFBVSxRQUFWLEVBQW9CLFNBQXBCLEVBQStCLE9BQS9CLEVBQXdDLE1BQXhDLEVBQWdELE9BQWhELEVBQXlELE9BQXpELEVBQWtFLE9BQWxFLEVBQTJFLE1BQTNFLENBQW5COztBQUVBO0FBQ0EsTUFBSU4sRUFBRU8sT0FBRixDQUFXSCxrQkFBWCxFQUErQkUsWUFBL0IsS0FBaUQsSUFBckQsRUFBNEQ7QUFDNUROLE1BQUUsbUJBQW1CSSxrQkFBckIsRUFBeUNJLElBQXpDO0FBQ0E7O0FBR0FSLElBQUUsaUNBQUYsRUFBcUNTLE1BQXJDLENBQTRDLFlBQVc7QUFDckQ7QUFDRlI7O0FBRUU7QUFDRixRQUFJRCxFQUFFTyxPQUFGLENBQVdQLEVBQUUsSUFBRixFQUFRSyxHQUFSLEVBQVgsRUFBMEJDLFlBQTFCLEtBQTRDLElBQWhELEVBQXVEO0FBQ3RETixRQUFFLG1CQUFtQkEsRUFBRSxJQUFGLEVBQVFLLEdBQVIsRUFBckIsRUFBb0NHLElBQXBDO0FBQ0E7QUFHQSxHQVZEO0FBZ0JELENBbkNEOztBQXNDQSxTQUFTUCxpQkFBVCxHQUE0QjtBQUMxQixNQUFJSyxlQUFlLENBQUMsT0FBRCxFQUFVLFFBQVYsRUFBb0IsU0FBcEIsRUFBK0IsT0FBL0IsRUFBd0MsTUFBeEMsRUFBZ0QsT0FBaEQsRUFBeUQsT0FBekQsRUFBa0UsT0FBbEUsRUFBMkUsTUFBM0UsQ0FBbkI7QUFDQUEsaUJBQWVBLGFBQWFJLEdBQWIsQ0FBa0IsVUFBU0MsQ0FBVCxFQUFXO0FBQzFDLFdBQU8sbUJBQWlCQSxDQUF4QjtBQUNELEdBRmMsRUFFWkMsSUFGWSxDQUVQLElBRk8sQ0FBZjs7QUFJQVosSUFBRU0sWUFBRixFQUFnQk8sSUFBaEI7QUFDRDs7QUFLRCxTQUFTWCxTQUFULEdBQXFCO0FBQ25CRixJQUFFLHFCQUFGLEVBQXlCYyxFQUF6QixDQUE0QixPQUE1QixFQUFxQyxVQUFTQyxDQUFULEVBQVc7QUFDOUNBLE1BQUVDLGNBQUY7QUFDQWhCLE1BQUUsSUFBRixFQUFRaUIsT0FBUixDQUFnQixXQUFoQixFQUE2QkMsSUFBN0IsQ0FBa0MsT0FBbEMsRUFBMkNiLEdBQTNDLENBQStDLEVBQS9DO0FBRUQsR0FKRDtBQUtEIiwiZmlsZSI6ImhpZGUtYm94ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIG1vcmUgb3IgbGVzcyBqdXN0IGhpZGVzIGFuZCBzaG93cyB0aGUgdmFyaW91cyBtZXRhYm94ZXNcbmpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oJCl7XG5cbiAgaGlkZV9mb3JtYXRfYm94ZXMoKTtcbiAgY2xlYXJMaW5rKCk7XG5cblxuICBpZiggJChcIiNwb3N0LWZvcm1hdHMtc2VsZWN0XCIpLmxlbmd0aCA8PSAwKSBcbiAgICByZXR1cm47XG5cbiAgdmFyIHNlbGVjdGVkUG9zdEZvcm1hdCA9ICQoXCJpbnB1dFtuYW1lPSdwb3N0X2Zvcm1hdCddOmNoZWNrZWRcIikudmFsKCk7XG5cbiAgdmFyIHBvc3RfZm9ybWF0cyA9IFsnYXNpZGUnLCAnc3RhdHVzJywgJ2dhbGxlcnknLCAnaW1hZ2UnLCAnbGluaycsICdxdW90ZScsICdhdWRpbycsICd2aWRlbycsICdjaGF0J107XG5cbiAgLy8gc2hvdyB0aGUgbWV0YWJveCBvbiBpbml0XG4gIGlmKCAkLmluQXJyYXkoIHNlbGVjdGVkUG9zdEZvcm1hdCwgcG9zdF9mb3JtYXRzICkgIT0gJy0xJyApIHtcblx0XHQkKCcjcG9zdF9mb3JtYXRzXycgKyBzZWxlY3RlZFBvc3RGb3JtYXQpLnNob3coKTtcblx0fVxuXG5cbiAgJChcImlucHV0W25hbWU9J3Bvc3RfZm9ybWF0J106cmFkaW9cIikuY2hhbmdlKGZ1bmN0aW9uKCkge1xuICAgIC8vIGhpZGUgdGhlIG1ldGEgYm94ZXNcblx0XHRoaWRlX2Zvcm1hdF9ib3hlcygpO1xuXG4gICAgLy8gaWYgdGhlIHNlbGVjdGVkIHBvc3QgZm9ybWF0IGlzIGluIHRoZSBwb3N0IGZvcm1hdHMgbGlzdCB0aGVuIHNob3cgdGhlIGJveFxuXHRcdGlmKCAkLmluQXJyYXkoICQodGhpcykudmFsKCksIHBvc3RfZm9ybWF0cyApICE9ICctMScgKSB7XG5cdFx0XHQkKCcjcG9zdF9mb3JtYXRzXycgKyAkKHRoaXMpLnZhbCgpKS5zaG93KClcblx0XHR9XG5cbiAgXG4gIH0pO1xuXG5cblxuXG5cbn0pO1xuXG5cbmZ1bmN0aW9uIGhpZGVfZm9ybWF0X2JveGVzKCl7XG4gIHZhciBwb3N0X2Zvcm1hdHMgPSBbJ2FzaWRlJywgJ3N0YXR1cycsICdnYWxsZXJ5JywgJ2ltYWdlJywgJ2xpbmsnLCAncXVvdGUnLCAnYXVkaW8nLCAndmlkZW8nLCAnY2hhdCddO1xuICBwb3N0X2Zvcm1hdHMgPSBwb3N0X2Zvcm1hdHMubWFwKCBmdW5jdGlvbihhKXtcbiAgICByZXR1cm4gJyNwb3N0X2Zvcm1hdHNfJythO1xuICB9KS5qb2luKCcsICcpO1xuXG4gICQocG9zdF9mb3JtYXRzKS5oaWRlKCk7XG59XG5cblxuXG5cbmZ1bmN0aW9uIGNsZWFyTGluaygpIHtcbiAgJCgnLnBmcC1qcy1yZW1vdmUtbGluaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpe1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAkKHRoaXMpLmNsb3Nlc3QoJy5saW5rLWJveCcpLmZpbmQoJ2lucHV0JykudmFsKCcnKTtcblxuICB9KTtcbn1cbiJdfQ==
},{}],4:[function(require,module,exports){
'use strict';

jQuery(document).ready(function ($) {

  // when a URL is pasted in
  $('.post_format_value').on('change', function (e) {
    e.preventDefault();
    var $this = $(this);
    var $metabox = $this.closest('.postbox');
    var url = $this.val();
    var format = $this.data('media');
    window['pfpAJAXMarkup'](url, format, $metabox);
  });

  // when the "remove image" link is clicked
  $('.pfp-js-remove-media').on('click', function (e) {
    e.preventDefault();

    var $this = $(this);
    var $metabox = $this.closest('.postbox');

    $metabox.find('.pfp-media-holder').html('');
    $metabox.find('.post_format_url').val('');
    $metabox.find('.post_format_value').val('');
  });

  // open the media library
  $('.pfp-js-media-library').on('click', function (e) {
    e.preventDefault();

    var $this = $(this);
    var format = $this.data('media');
    var $metabox = $this.closest('.postbox');
    var media = $metabox.find('.post_format_value').val();

    // if the media library is already created, open it
    if (wp.media.frames.mediaBox) {
      delete wp.media.frames.mediaBox;
    }

    // initialize media library
    wp.media.frames.mediaBox = wp.media({
      title: format,
      button: { text: 'Select ' + format },
      library: { type: format },
      multiple: false
    });

    // when the media is selelected, set the values
    wp.media.frames.mediaBox.on('select', function () {
      media_attachment = wp.media.frames.mediaBox.state().get('selection').first().toJSON();

      var funcName = 'pfp' + titleCase(format) + 'Select';
      pfpMediaSelect(media_attachment, format, $metabox);
    });

    wp.media.frames.mediaBox.open();
  });
});

/**
 * set the image correctly
 * @param  {object} media_attachment the media object sent from the wp media library
 * @param  {string} format           what type of post format are we working with?
 * @param  {object} $metabox         jquery object/DOM element
 * @return {html}                  new DOM element to display the media
 */
function pfpMediaSelect(media_attachment, format, $metabox) {
  var $html = pfpAJAXMarkup(media_attachment.url, format, $metabox);

  console.log(media_attachment, format, $metabox);
  $metabox.find('.post_format_value').val(media_attachment.url);
}

/**
 * AJAX the markup for the specified post format media type
 * @param  {string} url    [description]
 * @param  {string} format [description]
 *  * @param  {object} $metabox         jquery object/DOM element
 * @return {html}        [description]
 */
window.pfpAJAXMarkup = function (url, format, $metabox) {

  var data = {
    action: 'benjamin_postformat_oembed',
    pfpURL: url,
    pfpType: format
  };

  jQuery.ajax({
    type: "POST",
    url: ajaxurl,
    data: data,
    complete: function complete(response) {
      if (response.status == 200) {
        console.log(response);
        var $html = response.responseText;
        if ($html == '') {
          $metabox.find('.post_format_url').val('');
          $metabox.find('.post_format_value').val('');
        }
        $metabox.find('.pfp-media-holder').html($html);
      }
    }
  });
};

/**
 * Capitzalize a string
 * @param  {string} string the text string to capitalize
 * @return {string}        the capitalized text string
 */
function titleCase(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],5:[function(require,module,exports){
'use strict';

jQuery(document).ready(function ($) {

  $('.js--post-format-status-textarea').on('keyup', function () {
    var max = 140;
    var $this = $(this);
    var count = $this.val().length;
    var $countElm = $this.prev('.js--char-count');

    $countElm.text(count);
    if (count >= max) {
      $countElm.css('color', 'red');
    } else {
      $countElm.css('color', '');
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YXR1cy5qcyJdLCJuYW1lcyI6WyJqUXVlcnkiLCJkb2N1bWVudCIsInJlYWR5IiwiJCIsIm9uIiwibWF4IiwiJHRoaXMiLCJjb3VudCIsInZhbCIsImxlbmd0aCIsIiRjb3VudEVsbSIsInByZXYiLCJ0ZXh0IiwiY3NzIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxRQUFQLEVBQWlCQyxLQUFqQixDQUF1QixVQUFTQyxDQUFULEVBQVc7O0FBRWhDQSxJQUFFLGtDQUFGLEVBQXNDQyxFQUF0QyxDQUF5QyxPQUF6QyxFQUFrRCxZQUFVO0FBQzFELFFBQUlDLE1BQU0sR0FBVjtBQUNBLFFBQUlDLFFBQVFILEVBQUUsSUFBRixDQUFaO0FBQ0EsUUFBSUksUUFBUUQsTUFBTUUsR0FBTixHQUFZQyxNQUF4QjtBQUNBLFFBQUlDLFlBQVlKLE1BQU1LLElBQU4sQ0FBVyxpQkFBWCxDQUFoQjs7QUFFQUQsY0FBVUUsSUFBVixDQUFlTCxLQUFmO0FBQ0EsUUFBSUEsU0FBU0YsR0FBYixFQUFrQjtBQUNoQkssZ0JBQVVHLEdBQVYsQ0FBYyxPQUFkLEVBQXVCLEtBQXZCO0FBQ0QsS0FGRCxNQUdLO0FBQ0hILGdCQUFVRyxHQUFWLENBQWMsT0FBZCxFQUF1QixFQUF2QjtBQUNEO0FBRUYsR0FkRDtBQWdCRCxDQWxCRCIsImZpbGUiOiJzdGF0dXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCQpe1xuXG4gICQoJy5qcy0tcG9zdC1mb3JtYXQtc3RhdHVzLXRleHRhcmVhJykub24oJ2tleXVwJywgZnVuY3Rpb24oKXtcbiAgICB2YXIgbWF4ID0gMTQwO1xuICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgdmFyIGNvdW50ID0gJHRoaXMudmFsKCkubGVuZ3RoO1xuICAgIHZhciAkY291bnRFbG0gPSAkdGhpcy5wcmV2KCcuanMtLWNoYXItY291bnQnKTtcblxuICAgICRjb3VudEVsbS50ZXh0KGNvdW50KTtcbiAgICBpZiAoY291bnQgPj0gbWF4KSB7XG4gICAgICAkY291bnRFbG0uY3NzKCdjb2xvcicsICdyZWQnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAkY291bnRFbG0uY3NzKCdjb2xvcicsICcnKTtcbiAgICB9XG4gICAgICBcbiAgfSk7XG5cbn0pOyJdfQ==
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
